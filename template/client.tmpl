import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';
import { OperationMethods } from './types';
type GenKvType =  { [key: string]: string };
interface IHttpClientConfig extends AxiosRequestConfig {
  apiEnv?: 'local' | 'dev' | 'prod' | 'stage'
  apiBaseHost?: GenKvType
  apiPathPrefix?: GenKvType
}

export const apiPathPrefix: GenKvType = {
    "local": "{@api_local_path@}",
    "dev": "{@api_dev_path@}",
    "stage": "{@api_stage_path@}",
    "prod": "{@api_prod_path@}",
};

export const apiBaseHost: GenKvType = {
    "local": "{@api_local_server@}",
    "dev": "{@api_dev_server@}",
    "stage": "{@api_stage_server@}",
    "prod": "{@api_prod_server@}"
};

const apiMethods: Record<string, [url: string, method?: string]> = {
{@method_definitions@}
}

export function {@project_name_camel@}Client(defaultConfig?: IHttpClientConfig): OperationMethods {
  return new Proxy({@project_name_camel@}ClientRaw(defaultConfig), {
    get: function (target: any, prop: any) {
      if (target[prop] === undefined)
        return function (parameters: any, data: any, config: any) {
          if (config && config.headers) delete config.headers.host;
          const [url, method = 'GET'] = apiMethods[prop];
          if (!url) {
            throw new Error(`Method not found ${prop}`)
          }
          return target.axiosRequest({
            ...config,
            url,
            params: parameters,
            data: data,
            method
          });
        };
      else return target[prop];
    }
  }) as OperationMethods;
}


function {@project_name_camel@}ClientRaw(defaultConfig?: IHttpClientConfig) {
  const isBrowser: boolean = typeof window !== 'undefined' && typeof window.document !== 'undefined';
  const vEnv: string = defaultConfig?.apiEnv || process.env.API_ENV || 'local';
  const vBaseHost: GenKvType = defaultConfig && defaultConfig.apiBaseHost || {};
  const vPathPrefix: GenKvType = defaultConfig && defaultConfig.apiPathPrefix || {};

  let autoBaseHost: string =  '';
  let autoPathPrefix: string = '';

  if(isBrowser) {
     autoBaseHost = (<any>window).{@project_name_lower@}_api_host || '';
     autoPathPrefix = (<any>window).{@project_name_lower@}_api_prefix || vPathPrefix[vEnv] || '';
  } else {
    if ("{@project_name_upper@}_API_HOST" in process.env) {
      autoBaseHost = process.env.{@project_name_upper@}_API_HOST as string;
    } else {
      autoBaseHost = vBaseHost[vEnv] || '';
    }
    if ("{@project_name_upper@}_API_PREFIX" in process.env) {
      autoPathPrefix = process.env.{@project_name_upper@}_API_PREFIX as string;
    } else {
      autoPathPrefix = vPathPrefix[vEnv] || '';
    }
  }


  const axiosClient: AxiosInstance = axios.create({
    baseURL: `${autoBaseHost}${autoPathPrefix}`,
    timeout: 50000,
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    },
    withCredentials: true,
    ...defaultConfig
  });

  return {
    axiosRequest: async (options: IHttpClientConfig): Promise<any> => {
      return axiosClient(options);
    }
  }
};
